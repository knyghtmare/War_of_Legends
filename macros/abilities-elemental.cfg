#textdomain wesnoth-War_of_Legends

#define ABILITY_CAVE_AMBUSH
    [hides]
        id=cave_ambush
        name= _ "cave ambush"
        description=_"This unit can hide in cave, and remain undetected by its enemies.
Enemy units cannot see this unit while it is in cave, except if they have units next to it. Any enemy unit that first discovers this unit immediately loses all its remaining movement."
        special_note=_"This unit can hide in cave, and remain undetected by its enemies.
Enemy units cannot see this unit while it is in cave, except if they have units next to it. Any enemy unit that first discovers this unit immediately loses all its remaining movement."
        affect_self=yes
        [filter_self]
            # all non lit cave terrains :
            # - caves,
            # - rockbound caves,
            # - underground mushroom forest
            # - allowing cave bridges may mean that units can move unseen through keypoints. maybe to strong.
            [filter_location]
                terrain=U*^*,*^Bs|,*^Bs/,*^Bs\
                [not]
                    terrain=*^Ii*,*^Tfi*,*^Bsb*,*^Bc*,*^Bh*,*^Bp*,*^Bw*,*^V*,*^Ecf
                [/not]
            [/filter_location]
        [/filter_self]
    [/hides]
#enddef

# define the weapon specials

#define WEAPON_SPECIAL_FIRE_INFLICTION
    [fire_infliction]
        id=WOL_fire_infliction
        name= _ "fire infliction"
        active_on=offense
        description= _ "When used offensively, inflicts fire status on the opponent for a single turn. Attacking the opponent again with another elemental attack type might trigger an elemental reaction."
    [/fire_infliction]
#enddef

#define WEAPON_SPECIAL_COLD_INFLICTION
    [cold_infliction]
        id=WOL_cold_infliction
        name= _ "cold infliction"
        active_on=offense
        description= _ "When used offensively, inflicts cold status on the opponent for a single turn. Attacking the opponent again with another elemental attack type might trigger an elemental reaction."
    [/cold_infliction]
#enddef

#define WEAPON_SPECIAL_ELECTRIC_INFLICTION
    [electric_infliction]
        id=WOL_electric_infliction
        name= _ "electric infliction"
        active_on=offense
        description= _ "When used offensively, inflicts electric status on the opponent for a single turn. Attacking the opponent again with another elemental attack type might trigger an elemental reaction."
    [/electric_infliction]
#enddef

# elemental reactions
#define WEAPON_SPECIAL_THERMAL_SHOCK
    [damage]
        id=WOL_thermal_shock
        name=_"thermal shock"
        description= _ "When used against any unit with fire status, this attack deals double damage."
        special_note= _ "This unit can attacks that can cause elemental reactions with fire."
        multiply=2
        apply_to=self
        [filter_opponent]
            status=fire_status
        [/filter_opponent]
    [/damage]
#enddef

#define WEAPON_SPECIAL_OVERLOAD
    [damage]
        id=WOL_overload
        name= _"overload"
        description= _ "When used against any unit with electric status, the damage inflicted is doubled."
        special_note= _ "This unit can attacks that can cause elemental reactions with electric."
        multiply=2
        apply_to=self
        [filter_opponent]
            status=electric_status
        [/filter_opponent]
    [/damage]
#enddef

#define WEAPON_SPECIAL_MELT_COLD
#enddef

#define WEAPON_SPECIAL_MELT_FIRE
#enddef

# add events to inflict status

#define WOL_FIRE_INFLICTION_EVENT
    # check if unit can be inflicted
    [event]
        name="attack"
        id=WOL_elementals_fire_infliction_check
        first_time_only=no

        [filter_attack]
            special_id=WOL_fire_infliction
        [/filter_attack]
        [filter_second]
            # not leaders
            canrecruit=no
            # not already inflicted ones
            [not]
                status=fire_status
            [/not]
            [not]
                status=cold_status
            [/not]
            [not]
                status=electric_status
            [/not]
            # not drakes
            [not]
                race=drake
            [/not]
            # not dragons
            [not]
                race=dragon
            [/not]
            [not]
                type=Fire Dragon
            [/not]
            # not fire daemons
            [not]
                type_adv_tree=Lesser Fire Daemon
            [/not]
            [not]
                type_adv_tree=Fire Guardian
            [/not]
        [/filter_second]
        [set_variable]
            name=WOL_fire_status_inflictable
            value=yes
        [/set_variable]
    [/event]

    # Record that attacker/defender was target and was hit
    [event]
        name=attacker hits
        first_time_only=no
        id=WOL_elementals_fire_infliction_boolean
        [filter_attack]
            special_id=WOL_fire_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_fire_status_inflictable
                equals=yes
            [/variable]
        [/filter_condition]

        [set_variable]
            name=WOL_add_fire_status
            value=yes
        [/set_variable]
    [/event]

    # applies the fire inflicted status
    [event]
        name=attack end
        first_time_only=no
        id=WOL_elementals_fire_infliction_main
        [filter_attack]
            special_id=WOL_fire_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_add_fire_status
                equals=yes
            [/variable]
        [/filter_condition]
        [WOL_add_fire_status]
            id=$second_unit.id
        [/WOL_add_fire_status]
        {CLEAR_VARIABLE WOL_fire_status_inflictable,WOL_add_fire_status}
    [/event]

    # cleans variables in case infliction did not happen
    [event]
        name=attack end
        first_time_only=no
        id=WOL_elementals_fire_infliction_cleanup
        [filter_attack]
            special_id=WOL_fire_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_fire_status_inflictable
                equals=yes
            [/variable]
        [/filter_condition]
        {CLEAR_VARIABLE WOL_fire_status_inflictable}
    [/event]
#enddef

#define WOL_COLD_INFLICTION_EVENT
    # check if unit can be inflicted
    [event]
        name="attack"
        id=WOL_elementals_cold_infliction_check
        first_time_only=no

        [filter_attack]
            special_id=WOL_cold_infliction
        [/filter_attack]
        [filter_second]
            # not leaders
            canrecruit=no
            # not already inflicted ones
            [not]
                status=fire_status
            [/not]
            [not]
                status=cold_status
            [/not]
            [not]
                status=electric_status
            [/not]

            # not water daemons
            [not]
                type_adv_tree=Lesser Water Daemon
            [/not]
        [/filter_second]
        [set_variable]
            name=WOL_cold_status_inflictable
            value=yes
        [/set_variable]
    [/event]

    # Record that attacker/defender was target and was hit
    [event]
        name=attacker hits
        first_time_only=no
        id=WOL_elementals_cold_infliction_boolean
        [filter_attack]
            special_id=WOL_cold_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_cold_status_inflictable
                equals=yes
            [/variable]
        [/filter_condition]

        [set_variable]
            name=WOL_add_cold_status
            value=yes
        [/set_variable]
    [/event]

    # applies the cold inflicted status
    [event]
        name=attack end
        first_time_only=no
        id=WOL_elementals_cold_infliction_main
        [filter_attack]
            special_id=WOL_cold_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_add_cold_status
                equals=yes
            [/variable]
        [/filter_condition]
        [WOL_add_cold_status]
            id=$second_unit.id
        [/WOL_add_cold_status]
        {CLEAR_VARIABLE WOL_cold_status_inflictable,WOL_add_cold_status}
    [/event]

    # cleans variables in case infliction did not happen
    [event]
        name=attack end
        first_time_only=no
        id=WOL_elementals_cold_infliction_cleanup
        [filter_attack]
            special_id=WOL_cold_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_cold_status_inflictable
                equals=yes
            [/variable]
        [/filter_condition]
        {CLEAR_VARIABLE WOL_cold_status_inflictable}
    [/event]
#enddef

#define WOL_ELECTRIC_INFLICTION_EVENT
    # check if unit can be inflicted
    [event]
        name="attack"
        id=WOL_elementals_electric_infliction_check
        first_time_only=no

        [filter_attack]
            special_id=WOL_electric_infliction
        [/filter_attack]
        [filter_second]
            # not leaders
            canrecruit=no
            # not already inflicted ones
            [not]
                status=fire_status
            [/not]
            [not]
                status=cold_status
            [/not]
            [not]
                status=electric_status
            [/not]

            # not air daemons
            [not]
                type_adv_tree=Lesser Air Daemon
            [/not]
            [not]
                type=Dust Devil
            [/not]
        [/filter_second]
        [set_variable]
            name=WOL_electric_status_inflictable
            value=yes
        [/set_variable]
    [/event]

    # Record that attacker/defender was target and was hit
    [event]
        name=attacker hits
        first_time_only=no
        id=WOL_elementals_electric_infliction_boolean
        [filter_attack]
            special_id=WOL_electric_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_electric_status_inflictable
                equals=yes
            [/variable]
        [/filter_condition]

        [set_variable]
            name=WOL_add_electric_status
            value=yes
        [/set_variable]
    [/event]

    # applies the electric inflicted status
    [event]
        name=attack end
        first_time_only=no
        id=WOL_elementals_electric_infliction_main
        [filter_attack]
            special_id=WOL_electric_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_add_electric_status
                equals=yes
            [/variable]
        [/filter_condition]
        [WOL_add_electric_status]
            id=$second_unit.id
        [/WOL_add_electric_status]
        {CLEAR_VARIABLE WOL_electric_status_inflictable,WOL_add_electric_status}
    [/event]

    # cleans variables in case infliction did not happen
    [event]
        name=attack end
        first_time_only=no
        id=WOL_elementals_electric_infliction_cleanup
        [filter_attack]
            special_id=WOL_electric_infliction
        [/filter_attack]
        [filter_condition]
            [variable]
                name=WOL_electric_status_inflictable
                equals=yes
            [/variable]
        [/filter_condition]
        {CLEAR_VARIABLE WOL_electric_status_inflictable}
    [/event]
#enddef

#define ABILITY_CONJUROR
    [leadership]
        id=conjuror
        value=20
        cumulative=yes
        name= _ "conjuror"
        description= _ "Adjacent units with the summoned trait will do 20% more damage"
        affect_self=no
        affect_allies=yes
        affect_enemies=no
        [affect_adjacent]
            [filter]
                status=summoned
                formula="level <= other.level"
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef
